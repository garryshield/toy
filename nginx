#!/usr/bin/env bash

# Name: nginx
# Desc: an auto web server installation tool
# Date: 2013-02-07 by garryshield

source ./const

help() {
    echo "Usage: $0 {install|group|server|help} [option...]" >&2
    echo
    echo "    install <version>"
    echo "    group -v=<version> -p=<prefix> -n=<name> -u=<user> -g=<group>"
    echo "    server -v=<version> -p=<prefix> -n=<name> -s=<server> -P=<port> -r=<root> --server-name=<server-name>"
    echo
    # echo some stuff here for the -a or --add-options 
    exit 1
}

# nginx install <version>
# <version> e.g. 1.14.2
# nginx install 1.14.2
install() {
  if [ "$#" -ne 1 ]; then
    help
    exit 1
  fi

  local Nginx=nginx-$1
  local NginxPackName=nginx-$1.tar.gz
  local NginxUrlPath=https://nginx.org/download/${NginxPackName}
  local NginxSrcPath=${ToySrcPath}/${Nginx}
  local NginxTarPath=${ToyTmpPath}/${Nginx}
  local NginxPackPath=${ToySrcPath}/${Nginx}/${NginxPackName}
  local NginxInstallPath=${ToySoftPath}/${Nginx}

  echo "${Nginx} installation"
  echo "pleace input <Enter> twice to continue or <CTRL+C> to exit:"
  read
  read

  # backup
  if [ -d "${NginxInstallPath}" ]; then
    mv ${NginxInstallPath} ${NginxInstallPath}-`date '+%Y-%m-%d(%H:%M:%S)'`
  fi

  rm -rf ${NginxSrcPath}
  rm -rf ${NginxTarPath}

  mkdir -p ${NginxSrcPath}
  mkdir -p ${NginxTarPath}

  # https://www.nginx.com/resources/wiki/modules/echo/
  wget ${NginxUrlPath} -O ${NginxPackPath} &&
  wget https://github.com/openresty/echo-nginx-module/archive/v0.61.tar.gz -O ${NginxSrcPath}/echo-nginx-module-0.61.tar.gz

  local retVal=$?
  if [ "${retVal}" -ne 0 ]; then
      exit ${retVal}
  fi

  tar -zxvf ${NginxSrcPath}/echo-nginx-module-0.61.tar.gz -C ${NginxTarPath}
  tar -zxvf ${NginxPackPath} -C ${NginxTarPath}
  cd ${NginxTarPath}/${Nginx}

  # configure
  # http://nginx.org/en/docs/configure.html
  ./configure --help > ../configure

  local NginxConfigure=(
    --prefix=${NginxInstallPath}
    # --sbin-path=${NginxInstallPath}/sbin/nginx
    # --modules-path=${NginxInstallPath}/modules
    # --conf-path=${NodeEtc}/nginx.conf
    # --error-log-path=${NginxLogPath}/error.log
    # --pid-path=${NginxVarPath}/nginx.pid
    # --lock-path=${NginxVarPath}/nginx.lock

    # --user=${NginxUser}
    # --group=${NginxGroup}

    --with-select_module
    --with-poll_module

    --with-threads

    --with-file-aio

    --with-http_ssl_module
    --with-http_v2_module
    --with-http_realip_module
    --with-http_addition_module
    --with-http_xslt_module
    --with-http_xslt_module=dynamic
    --with-http_image_filter_module
    --with-http_image_filter_module=dynamic

    --with-http_geoip_module
    --with-http_geoip_module=dynamic
    --with-http_sub_module
    --with-http_dav_module
    --with-http_flv_module
    --with-http_mp4_module
    --with-http_gunzip_module
    --with-http_gzip_static_module
    --with-http_auth_request_module
    --with-http_random_index_module
    --with-http_secure_link_module
    --with-http_degradation_module
    --with-http_slice_module
    --with-http_stub_status_module

    --with-http_perl_module
    --with-http_perl_module=dynamic

    # --http-log-path=${NginxLogPath}/access.log
    # --http-client-body-temp-path=${NginxVarPath}/client_body_temp
    # --http-proxy-temp-path=${NginxVarPath}/proxy_temp
    # --http-fastcgi-temp-path=${NginxVarPath}/fastcgi_temp
    # --http-uwsgi-temp-path=${NginxVarPath}/uwsgi_temp
    # --http-scgi-temp-path=${NginxVarPath}/scgi_temp

    --with-mail
    --with-mail=dynamic
    --with-mail_ssl_module

    --with-stream
    --with-stream=dynamic
    --with-stream_ssl_module
    --with-stream_realip_module
    --with-stream_geoip_module
    --with-stream_geoip_module=dynamic
    --with-stream_ssl_preread_module

    --with-google_perftools_module
    --with-cpp_test_module

    --add-dynamic-module=${NginxTarPath}/echo-nginx-module-0.61

    --with-compat

    --with-pcre

    --with-libatomic

    --with-debug
  )

  for item in ${NginxConfigure[@]}; do
    echo ${item} >> ../option
  done

  ./configure ${NginxConfigure[@]} 2> ../configure.err

  make -j 8 2> ../make.err
  make -j 8 install 2> ../install.err

  # done
  echo
  echo
  echo ================================================================================
  echo "${Nginx} installation SUCCESS"
  echo "Configure:"
  for item in ${NginxConfigure[@]}; do
    echo "    ${item}"
  done
  echo ================================================================================
  echo
  echo

  exit 0
}

# nginx group 
# -v, --version
# -p, --prefix
# -n, --name
# -u, --user
# -g, --group
# nginx group -v=1.14.2 -p=/var/sites/www_test_com -n=frontend -u=nginx-1.14.2 -g=www
# nginx group -v=1.14.2 -p=/var/sites/www_test_com -n=backend -u=nginx-1.14.2 -g=www
group() {
  for i in "$@"; do
  case $i in
      -v=*|--version=*)
      local Version="${i#*=}"
      shift
      ;;
      -p=*|--prefix=*)
      local Prefix="${i#*=}"
      shift
      ;;
      -n=*|--name=*)
      local Name="${i#*=}"
      shift
      ;;
      -u=*|--user=*)
      local User="${i#*=}"
      shift
      ;;
      -g=*|--group=*)
      local Group="${i#*=}"
      shift
      ;;
      *)

      ;;
  esac
  done

  if [ -z "$Version" ] || [ -z "$Prefix" ] || [ -z "$Name" ]; then
    help
    exit 1
  fi

  local Nginx=nginx-$Version
  local NginxInstallPath=${ToySoftPath}/${Nginx}

  local User=${User:-${Nginx}}
  local Group=${Group:-www}

  if [ ! -d "${NginxInstallPath}" ]; then
    echo "${Nginx} is not installed yet"
    exit 1
  fi

  local NodePath=${Prefix}/${Nginx}

  local NodeData=${NodePath}/data
  local NodeEtc=${NodePath}/etc
  local NodeVar=${NodePath}/var
  local NodeLog=${NodePath}/log
  local NodeSystemd=${NodePath}/systemd

  local GroupData=${NodeData}/${Name}
  local GroupEtc=${NodeEtc}/${Name}
  local GroupVar=${NodeVar}/${Name}
  local GroupLog=${NodeLog}/${Name}

  if [ -d "${GroupEtc}" ]; then
    echo "${GroupEtc} already exists"
    exit 1
  fi

  mkdir -p ${NodeData}
  mkdir -p ${NodeEtc}
  mkdir -p ${NodeVar}
  mkdir -p ${NodeLog}
  mkdir -p ${NodeSystemd}

  mkdir -p ${GroupData}
  mkdir -p ${GroupEtc}
  mkdir -p ${GroupVar}
  mkdir -p ${GroupLog}
  mkdir -p ${GroupEtc}/conf.d
  mkdir -p ${GroupEtc}/segment

  local UUID=$(echo -n ${GroupEtc} | openssl md5 | awk '{print $2}')

  # nginx@.server
  echo
  echo
  echo "nginx@.server"
  /bin/cp -v ${ToyCnfPath}/${Nginx}/nginx@.service ${NodeSystemd}/${Nginx}@${UUID}.service

  sed -i "/@Nginx@/{
    s//${Nginx}/g
    w /dev/stdout
  }" ${NodeSystemd}/${Nginx}@${UUID}.service
  sed -i "/@ENV@/{
    s::${GroupEtc}/env:g
    w /dev/stdout
  }" ${NodeSystemd}/${Nginx}@${UUID}.service
  sed -i "/@NGINX_BIN@/{
    s::${NginxInstallPath}/sbin/nginx:g
    w /dev/stdout
  }" ${NodeSystemd}/${Nginx}@${UUID}.service

  systemctl enable ${NodeSystemd}/${Nginx}@${UUID}.service

  # nginx.conf
  echo
  echo
  echo "nginx.conf"
  /bin/cp -v ${ToyCnfPath}/${Nginx}/nginx.conf ${GroupEtc}/nginx.conf

  sed -i "/@USER@/{
    s//${User}/g
    w /dev/stdout
  }" ${GroupEtc}/nginx.conf
  sed -i "/@GROUP@/{
    s//${Group}/g
    w /dev/stdout
  }" ${GroupEtc}/nginx.conf
  sed -i "/@ERROR_LOG@/{
    s::${GroupLog}/nginx.log:g
    w /dev/stdout
  }" ${GroupEtc}/nginx.conf
  sed -i "/@PID@/{
    s::${GroupVar}/nginx.pid:g
    w /dev/stdout
  }" ${GroupEtc}/nginx.conf
  sed -i "/@VAR_PATH@/{
    s::${GroupVar}:g
    w /dev/stdout
  }" ${GroupEtc}/nginx.conf

  # segment
  echo
  echo
  echo "segment"
  /bin/cp -rfv ${ToyCnfPath}/${Nginx}/segment/* ${GroupEtc}/segment

  # env
  echo
  echo
  echo "env"
  /bin/cp -v ${ToyCnfPath}/${Nginx}/env ${GroupEtc}/env

  sed -i "/@PID@/{
    s::${GroupVar}/nginx.pid:g
    w /dev/stdout
  }" ${GroupEtc}/env
  sed -i "/@CONF@/{
    s::${GroupEtc}/nginx.conf:g
    w /dev/stdout
  }" ${GroupEtc}/env

  # user&group
  echo
  echo
  echo "user&group"
  if getent group ${Group} &>/dev/null; then
    echo "${Group} already exists"
  else
    groupadd ${Group} && echo "groupadd ${Group}"
  fi
  if getent passwd ${User} &>/dev/null; then
    echo "${User} already exists"
  else
    useradd -s /sbin/nologin -d /dev/null -M -g ${Group} ${User} &&
      echo "useradd -s /sbin/nologin -d /dev/null -M -g ${Group} ${User}"
  fi

  # chown -R ${User}:${Group} ${GroupData}
  # chown -R ${User}:${Group} ${GroupEtc}
  # chown -R ${User}:${Group} ${GroupVar}
  # chown -R ${User}:${Group} ${GroupLog}

  echo
  return 0
}

# nginx server
# -v, --version
# -p, --prefix
# -n, --name
# -s, --server
# -P, --port
# -r, --root
# --server-name
# nginx server -v=1.14.2 -p=/var/sites/www_test_com -n=default -s=frontend -P=80 -r=/var/sites/www_test_com/frontend --server-name=frontend.test.com
# nginx server -v=1.14.2 -p=/var/sites/www_test_com -n=default -s=backend -P=80 -r=/var/sites/www_test_com/backend --server-name=backend.test.com
server() {
  for i in "$@"; do
  case $i in
      -v=*|--version=*)
      local Version="${i#*=}"
      shift
      ;;
      -p=*|--prefix=*)
      local Prefix="${i#*=}"
      shift
      ;;
      -n=*|--name=*)
      local Name="${i#*=}"
      shift
      ;;
      -s=*|--server=*)
      local Server="${i#*=}"
      shift
      ;;
      -P=*|--port=*)
      local Port="${i#*=}"
      shift
      ;;
      -r=*|--root=*)
      local Root="${i#*=}"
      shift
      ;;
      --server-name=*)
      local ServerName="${i#*=}"
      shift
      ;;
      *)

      ;;
  esac
  done

  if [ -z "$Version" ] || [ -z "$Prefix" ] || [ -z "$Name" ] || [ -z "$Server" ]; then
    help
    exit 1
  fi

  local Nginx=nginx-$Version
  local NginxInstallPath=${ToySoftPath}/${Nginx}

  local Port=${Port:-80}

  if [ ! -d "${NginxInstallPath}" ]; then
    echo "${Nginx} is not installed yet"
    exit 1
  fi

  local NodePath=${Prefix}/${Nginx}

  local NodeData=${NodePath}/data
  local NodeEtc=${NodePath}/etc
  local NodeVar=${NodePath}/var
  local NodeLog=${NodePath}/log
  local NodeSystemd=${NodePath}/systemd

  local GroupData=${NodeData}/${Name}
  local GroupEtc=${NodeEtc}/${Name}
  local GroupVar=${NodeVar}/${Name}
  local GroupLog=${NodeLog}/${Name}

  if [ ! -d "${GroupEtc}" ]; then
    echo "${GroupEtc} not exists"
    exit 1
  fi

  local ServerEtc=${GroupEtc}/conf.d/${Server}.conf
  local ServerAccessLog=${GroupLog}/${Server}.access.log
  local ServerErrorLog=${GroupLog}/${Server}.error.log
  local ServerRoot=${Root:-${GroupData}/${Server}}
  local ServerName="${ServerName:-localhost}"

  if [ -f "${ServerEtc}" ]; then
    echo "${ServerEtc} already exists"
    exit 1
  fi

  if [ ! -d "${ServerRoot}" ]; then
    mkdir -p ${ServerRoot}

    # html
    echo
    echo
    echo "html"
    /bin/cp -rfv ${ToyCnfPath}/${Nginx}/html/* ${ServerRoot}
  fi

  # www.conf
  echo
  echo
  echo "www.conf"
  /bin/cp -v ${ToyCnfPath}/${Nginx}/www.conf ${ServerEtc}

  sed -i "/@PORT@/{
    s::${Port}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/server_name localhost;/{
    s::server_name ${ServerName};:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/@ACCESS_LOG@/{
    s::${ServerAccessLog}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/@ERROR_LOG@/{
    s::${ServerErrorLog}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/@ROOT@/{
    s::${ServerRoot}:g
    w /dev/stdout
  }" ${ServerEtc}

  # firewall
  echo
  echo
  echo "firewall"
  if firewall-cmd --list-ports --zone=public | grep ${Port}/tcp &>/dev/null; then
    echo "${Port} already exists"
  else
    firewall-cmd --permanent --zone=public --add-port=${Port}/tcp &&
      echo "firewall-cmd --permanent --zone=public --add-port=${Port}/tcp"
    firewall-cmd --reload &&
      echo "firewall-cmd --reload"
  fi

  echo
  return 0
}

case "$1" in
  install)
    shift
    install "$@"
    ;;
  group)
    shift
    group "$@"
    ;;
  server)
    shift
    server "$@"
    ;;
  *)
    help
    ;;
esac