#!/usr/bin/env bash

# Name: redis
# Desc: an auto web server installation tool
# Date: 2013-02-07 by garryshield

source ./const

help() {
    echo "Usage: $0 {install|group|server|help} [option...]" >&2
    echo
    echo "    install <version>"
    echo "    group -v=<version> -p=<prefix>"
    echo "    server -v=<version> -p=<prefix> -P=<port>"
    echo
    # echo some stuff here for the -a or --add-options 
    exit 1
}

# redis install <version>
# <version> e.g. 5.0.4
# redis install 5.0.4
install() {
  if [ "$#" -ne 1 ]; then
    help
    exit 1
  fi

  local Redis=redis-$1
  local RedisPackName=redis-$1.tar.gz
  local RedisUrlPath=http://download.redis.io/releases/${RedisPackName}
  # local RedisUrlPath=http://192.168.113.1:8080/${RedisPackName}
  local RedisSrcPath=${ToySrcPath}/${Redis}
  local RedisTarPath=${ToyTmpPath}/${Redis}
  local RedisPackPath=${ToySrcPath}/${Redis}/${RedisPackName}
  local RedisInstallPath=${ToySoftPath}/${Redis}

  echo "${Redis} installation"
  echo "pleace input <Enter> twice to continue or <CTRL+C> to exit:"
  read
  read

  # backup
  if [ -d "${RedisInstallPath}" ]; then
    mv ${RedisInstallPath} ${RedisInstallPath}-`date '+%Y-%m-%d(%H:%M:%S)'`
  fi

  rm -rf ${RedisSrcPath}
  rm -rf ${RedisTarPath}

  mkdir -p ${RedisSrcPath}
  mkdir -p ${RedisTarPath}

  wget ${RedisUrlPath} -O ${RedisPackPath}

  local retVal=$?
  if [ "${retVal}" -ne 0 ]; then
      exit ${retVal}
  fi

  tar -zxvf ${RedisPackPath} -C ${RedisTarPath}
  cd ${RedisTarPath}/${Redis}

  # configure
  ./configure --help > ../configure

  local RedisConfigure=(
    PREFIX=${RedisInstallPath}
  )

  for item in ${RedisConfigure[@]}; do
    echo ${item} >> ../option
  done

  make -j 8 ${RedisConfigure[@]} install 2> ../install.err

  # done
  echo
  echo
  echo ================================================================================
  echo "${Redis} installation SUCCESS"
  echo "Configure:"
  for item in ${RedisConfigure[@]}; do
    echo "    ${item}"
  done
  echo ================================================================================
  echo
  echo

  exit 0
}

# redis group 
# -v, --version
# -p, --prefix
# redis group -v=5.0.4 -p=/var/sites/www_test_com
# redis group -v=5.0.4 -p=/var/sites/www_test_com
group(){
  for i in "$@"; do
  case $i in
      -v=*|--version=*)
      local Version="${i#*=}"
      shift
      ;;
      -p=*|--prefix=*)
      local Prefix="${i#*=}"
      shift
      ;;
      *)

      ;;
  esac
  done

  if [ -z "$Version" ] || [ -z "$Prefix" ]; then
    help
    exit 1
  fi

  local Redis=redis-$Version
  local RedisInstallPath=${ToySoftPath}/${Redis}

  if [ ! -d "${RedisInstallPath}" ]; then
    echo "${Redis} is not installed yet"
    exit 1
  fi

  local NodePath=${Prefix}/${Redis}

  local NodeData=${NodePath}/data
  local NodeEtc=${NodePath}/etc
  local NodeVar=${NodePath}/var
  local NodeLog=${NodePath}/log
  local NodeSystemd=${NodePath}/systemd

  mkdir -p ${NodeData}
  mkdir -p ${NodeEtc}
  mkdir -p ${NodeVar}
  mkdir -p ${NodeLog}
  mkdir -p ${NodeSystemd}

  echo
  return 0
}

# redis server 
# -v, --version
# -p, --prefix
# -P, --port
# redis server -v=1.5.12 -p=/var/sites/www_test_com -P=6379
# redis server -v=1.5.12 -p=/var/sites/www_test_com -P=6380
server(){
  for i in "$@"; do
  case $i in
      -v=*|--version=*)
      local Version="${i#*=}"
      shift
      ;;
      -p=*|--prefix=*)
      local Prefix="${i#*=}"
      shift
      ;;
      -P=*|--port=*)
      local Port="${i#*=}"
      shift
      ;;
      *)

      ;;
  esac
  done

  if [ -z "$Version" ] || [ -z "$Prefix" ] || [ -z "$Port" ]; then
    help
    exit 1
  fi

  local Redis=redis-$Version
  local RedisInstallPath=${ToySoftPath}/${Redis}

  if [ ! -d "${RedisInstallPath}" ]; then
    echo "${Redis} is not installed yet"
    exit 1
  fi

  local NodePath=${Prefix}/${Redis}

  local NodeData=${NodePath}/data
  local NodeEtc=${NodePath}/etc
  local NodeVar=${NodePath}/var
  local NodeLog=${NodePath}/log
  local NodeSystemd=${NodePath}/systemd

  local ServerDataPath=${NodeData}/${Port}
  local ServerEtcPath=${NodeEtc}/${Port}
  local ServerVarPath=${NodeVar}/${Port}
  local ServerLogPath=${NodeLog}/${Port}

  local ServerEtc=${ServerEtcPath}/redis.conf
  local ServerClusterEtc=${ServerEtcPath}/cluster.conf
  local ServerPid=${ServerVarPath}/redis.pid
  local ServerLog=${ServerLogPath}/redis.log
  local ServerDB=dump.rdb
  local ServerAOF=appendonly.aof

  if [ -f "${ServerEtc}" ]; then
    echo "${ServerEtc} already exists"
    exit 1
  fi

  mkdir -p ${ServerDataPath}
  mkdir -p ${ServerEtcPath}
  mkdir -p ${ServerVarPath}
  mkdir -p ${ServerLogPath}

  local UUID=$(echo -n ${ServerEtc} | openssl md5 | awk '{print $2}')

  # redis.conf
  # https://github.com/antirez/redis/blob/5.0.4/redis.conf
  echo
  echo
  echo "redis.conf"
  /bin/cp -v ${ToyCnfPath}/${Redis}/redis.conf ${ServerEtc}

  sed -i "/^bind 127.0.0.1/{
    s::# bind 127.0.0.1:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^port 6379/{
    s::port ${Port}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^daemonize no/{
    s::daemonize yes:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^supervised no/{
    s::supervised systemd:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^pidfile \/var\/run\/redis_6379.pid/{
    s::pidfile ${ServerPid}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^logfile \"\"/{
    s::logfile ${ServerLog}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^dir .\//{
    s::dir ${ServerDataPath}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^dbfilename dump.rdb/{
    s::dbfilename ${ServerDB}:g
    w /dev/stdout
  }" ${ServerEtc}
  # sed -i "/^# requirepass foobared/{
  #   s::requirepass foobared:g
  #   w /dev/stdout
  # }" ${ServerEtc}
  sed -i "/^appendonly no/{
    s::appendonly yes:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^appendfilename \"appendonly.aof\"/{
    s::appendfilename \"${ServerAOF}\":g
    w /dev/stdout
  }" ${ServerEtc}

  # cluster mode
  # sed -i "/^# cluster-enabled yes/{
  #   s::cluster-enabled yes:g
  #   w /dev/stdout
  # }" ${ServerEtc}
  sed -i "/^# cluster-config-file nodes-6379.conf/{
    s::cluster-config-file ${ServerClusterEtc}:g
    w /dev/stdout
  }" ${ServerEtc}

  # redis@.server
  echo
  echo
  echo "redis@.server"
  /bin/cp -v ${ToyCnfPath}/${Redis}/redis@.service ${NodeSystemd}/${Redis}@${UUID}.service

  sed -i "/@Redis@/{
    s//${Redis}/g
    w /dev/stdout
  }" ${NodeSystemd}/${Redis}@${UUID}.service
  sed -i "/@PID@/{
    s::${ServerPid}:g
    w /dev/stdout
  }" ${NodeSystemd}/${Redis}@${UUID}.service
  sed -i "/@CONF@/{
    s::${ServerEtc}:g
    w /dev/stdout
  }" ${NodeSystemd}/${Redis}@${UUID}.service
  sed -i "/@REDIS_SERVER@/{
    s::${RedisInstallPath}/bin/redis-server:g
    w /dev/stdout
  }" ${NodeSystemd}/${Redis}@${UUID}.service

  systemctl enable ${NodeSystemd}/${Redis}@${UUID}.service

  echo
  return 0
}

case "$1" in
  install)
    shift
    install "$@"
    ;;
  group)
    shift
    group "$@"
    ;;
  server)
    shift
    server "$@"
    ;;
  *)
    help
    ;;
esac