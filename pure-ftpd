#!/usr/bin/env bash

# Name: pure-ftpd
# Desc: an auto web server installation tool
# Date: 2013-02-07 by garryshield

source ./const

help() {
    echo "Usage: $0 {install|group|server|help} [option...]" >&2
    echo
    echo "    install <version>"
    echo "    group -v=<version> -p=<prefix>"
    echo "    server -v=<version> -p=<prefix> -P=<port>"
    echo
    # echo some stuff here for the -a or --add-options 
    exit 1
}

# pure-ftpd install <version>
# <version> e.g. 1.0.48
# pure-ftpd install 1.0.48
install() {
  if [ "$#" -ne 1 ]; then
    help
    exit 1
  fi

  local PureFtpd=pure-ftpd-$1
  local PureFtpdPackName=pure-ftpd-$1.tar.gz
  local PureFtpdUrlPath=https://download.pureftpd.org/pub/pure-ftpd/releases/${PureFtpdPackName}
  # local PureFtpdUrlPath=http://192.168.113.1:8080/${PureFtpdPackName}
  local PureFtpdSrcPath=${ToySrcPath}/${PureFtpd}
  local PureFtpdTarPath=${ToyTmpPath}/${PureFtpd}
  local PureFtpdPackPath=${ToySrcPath}/${PureFtpd}/${PureFtpdPackName}
  local PureFtpdInstallPath=${ToySoftPath}/${PureFtpd}

  echo "${PureFtpd} installation"
  echo "pleace input <Enter> twice to continue or <CTRL+C> to exit:"
  read
  read

  # backup
  if [ -d "${PureFtpdInstallPath}" ]; then
    mv ${PureFtpdInstallPath} ${PureFtpdInstallPath}-`date '+%Y-%m-%d(%H:%M:%S)'`
  fi

  rm -rf ${PureFtpdSrcPath}
  rm -rf ${PureFtpdTarPath}

  mkdir -p ${PureFtpdSrcPath}
  mkdir -p ${PureFtpdTarPath}

  wget ${PureFtpdUrlPath} -O ${PureFtpdPackPath}

  local retVal=$?
  if [ "${retVal}" -ne 0 ]; then
      exit ${retVal}
  fi

  tar -zxvf ${PureFtpdPackPath} -C ${PureFtpdTarPath}
  cd ${PureFtpdTarPath}/${PureFtpd}

  # configure
  ./configure --help > ../configure

  local PureFtpdConfigure=(
    --prefix=${PureFtpdInstallPath}

    --with-everything

    --with-tls
  )

  for item in ${PureFtpdConfigure[@]}; do
    echo ${item} >> ../option
  done

  ./configure ${PureFtpdConfigure[@]} 2> ../configure.err

  make -j 8 2> ../make.err
  make -j 8 install 2> ../install.err

  # done
  echo
  echo
  echo ================================================================================
  echo "${PureFtpd} installation SUCCESS"
  echo "Configure:"
  for item in ${PureFtpdConfigure[@]}; do
    echo "    ${item}"
  done
  echo ================================================================================
  echo
  echo

  exit 0
}

# pure-ftpd group 
# -v, --version
# -p, --prefix
# pure-ftpd group -v=1.0.48 -p=/var/sites/www_test_com
group(){
  for i in "$@"; do
  case $i in
      -v=*|--version=*)
      local Version="${i#*=}"
      shift
      ;;
      -p=*|--prefix=*)
      local Prefix="${i#*=}"
      shift
      ;;
      *)

      ;;
  esac
  done

  if [ -z "$Version" ] || [ -z "$Prefix" ]; then
    help
    exit 1
  fi

  local PureFtpd=pure-ftpd-$Version
  local PureFtpdInstallPath=${ToySoftPath}/${PureFtpd}

  if [ ! -d "${PureFtpdInstallPath}" ]; then
    echo "${PureFtpd} is not installed yet"
    exit 1
  fi

  local NodePath=${Prefix}/${PureFtpd}

  local NodeData=${NodePath}/data
  local NodeEtc=${NodePath}/etc
  local NodeVar=${NodePath}/var
  local NodeLog=${NodePath}/log
  local NodeSystemd=${NodePath}/systemd

  mkdir -p ${NodeData}
  mkdir -p ${NodeEtc}
  mkdir -p ${NodeVar}
  mkdir -p ${NodeLog}
  mkdir -p ${NodeSystemd}

  echo
  return 0
}

# pure-ftpd server 
# -v, --version
# -p, --prefix
# -P, --port
# pure-ftpd server -v=1.0.48 -p=/var/sites/www_test_com -P=21
server(){
  for i in "$@"; do
  case $i in
      -v=*|--version=*)
      local Version="${i#*=}"
      shift
      ;;
      -p=*|--prefix=*)
      local Prefix="${i#*=}"
      shift
      ;;
      -P=*|--port=*)
      local Port="${i#*=}"
      shift
      ;;
      *)

      ;;
  esac
  done

  if [ -z "$Version" ] || [ -z "$Prefix" ] || [ -z "$Port" ]; then
    help
    exit 1
  fi

  local PureFtpd=pure-ftpd-$Version
  local PureFtpdInstallPath=${ToySoftPath}/${PureFtpd}

  if [ ! -d "${PureFtpdInstallPath}" ]; then
    echo "${PureFtpd} is not installed yet"
    exit 1
  fi

  local NodePath=${Prefix}/${PureFtpd}

  local NodeData=${NodePath}/data
  local NodeEtc=${NodePath}/etc
  local NodeVar=${NodePath}/var
  local NodeLog=${NodePath}/log
  local NodeSystemd=${NodePath}/systemd

  local ServerDataPath=${NodeData}/${Port}
  local ServerEtcPath=${NodeEtc}/${Port}
  local ServerVarPath=${NodeVar}/${Port}
  local ServerLogPath=${NodeLog}/${Port}

  local ServerEtc=${ServerEtcPath}/pure-ftpd.conf
  local ServerPid=${ServerVarPath}/pure-ftpd.pid
  local ServerLog=${ServerLogPath}/pure-ftpd.log
  local ServerDB=${ServerDataPath}/pure-ftpd.pdb
  local ServerCertFile=${ServerDataPath}/pure-ftpd.pem

  if [ -f "${ServerEtc}" ]; then
    echo "${ServerEtc} already exists"
    exit 1
  fi

  local UUID=$(echo -n ${ServerEtc} | openssl md5 | awk '{print $2}')

  mkdir -p ${ServerDataPath}
  mkdir -p ${ServerEtcPath}
  mkdir -p ${ServerVarPath}
  mkdir -p ${ServerLogPath}

  # TLS
  openssl req -x509 -nodes -newkey rsa:2048 -sha256 -keyout ${ServerCertFile} -out ${ServerCertFile}
  chmod 600 ${ServerCertFile}

  # pure-ftpd.conf
  # https://github.com/jedisct1/pure-ftpd/blob/1.0.48/pure-ftpd.conf.in
  echo
  echo
  echo "pure-ftpd.conf"
  /bin/cp -v ${ToyCnfPath}/${PureFtpd}/pure-ftpd.conf ${ServerEtc}

  sed -i "/@sbindir@/{
    s::${PureFtpdInstallPath}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/@sysconfdir@/{
    s::${PureFtpdInstallPath}/etc:g
    w /dev/stdout
  }" ${ServerEtc}

  sed -i "/^# PIDFile \+\/var\/run\/pure-ftpd.pid/{
    s::PIDFile ${ServerPid}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^# PureDB \+\/etc\/pureftpd.pdb/{
    s::PureDB ${ServerDB}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^# PassivePortRange \+30000 50000/{
    s::PassivePortRange 30000 50000:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^# Bind \+127.0.0.1,21/{
    s::Bind ${Port}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^# AltLog \+clf\:\/var\/log\/pureftpd.log/{
    s::AltLog clf\:${ServerLog}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^# AltLog \+stats\:\/var\/log\/pureftpd.log/{
    s::# AltLog stats\:${ServerLog}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^# AltLog \+w3c\:\/var\/log\/pureftpd.log/{
    s::# AltLog w3c\:${ServerLog}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^# TLS \+1/{
    s::TLS 1:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^# CertFile \+\/etc\/ssl\/private\/pure-ftpd.pem/{
    s::CertFile ${ServerCertFile}:g
    w /dev/stdout
  }" ${ServerEtc}
  sed -i "/^# IPV4Only \+yes/{
    s::IPV4Only yes:g
    w /dev/stdout
  }" ${ServerEtc}

  # pure-ftpd@.server
  echo
  echo
  echo "pure-ftpd@.server"
  /bin/cp -v ${ToyCnfPath}/${PureFtpd}/pure-ftpd@.service ${NodeSystemd}/${PureFtpd}@${UUID}.service

  sed -i "/@PureFtpd@/{
    s//${PureFtpd}/g
    w /dev/stdout
  }" ${NodeSystemd}/${PureFtpd}@${UUID}.service
  sed -i "/@PID@/{
    s::${ServerPid}:g
    w /dev/stdout
  }" ${NodeSystemd}/${PureFtpd}@${UUID}.service
  sed -i "/@CONF@/{
    s::${ServerEtc}:g
    w /dev/stdout
  }" ${NodeSystemd}/${PureFtpd}@${UUID}.service
  sed -i "/@PURE_FTPD@/{
    s::${PureFtpdInstallPath}/sbin/pure-ftpd:g
    w /dev/stdout
  }" ${NodeSystemd}/${PureFtpd}@${UUID}.service

  systemctl enable ${NodeSystemd}/${PureFtpd}@${UUID}.service

  # firewall
  echo
  echo
  echo "firewall"
  if firewall-cmd --list-ports --zone=public | grep ${Port}/tcp &>/dev/null; then
    echo "${Port} already exists"
  else
    firewall-cmd --permanent --zone=public --add-port=${Port}/tcp &&
      echo "firewall-cmd --permanent --zone=public --add-port=${Port}/tcp"
    firewall-cmd --reload &&
      echo "firewall-cmd --reload"
  fi

  if firewall-cmd --list-ports --zone=public | grep 30000-50000/tcp &>/dev/null; then
    echo "30000-50000 already exists"
  else
    firewall-cmd --permanent --zone=public --add-port=30000-50000/tcp &&
      echo "firewall-cmd --permanent --zone=public --add-port=30000-50000/tcp"
    firewall-cmd --reload &&
      echo "firewall-cmd --reload"
  fi

  # pure-pw
  # pure-pw useradd <login> -u <user> -g <group> -d <home> -f <pure-ftpd.passwd>
  # pure-pw mkdb <pure-ftpd.pdb> -f <pure-ftpd.passwd>
  # pure-pw show <login> -f <pure-ftpd.passwd>

  echo
  return 0
}

case "$1" in
  install)
    shift
    install "$@"
    ;;
  group)
    shift
    group "$@"
    ;;
  server)
    shift
    server "$@"
    ;;
  *)
    help
    ;;
esac