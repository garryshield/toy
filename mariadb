#!/usr/bin/env bash

# Name: mariadb
# Desc: an auto web server installation tool
# Date: 2013-02-07 by garryshield

source ./const

help() {
    echo "Usage: $0 {install|group|server|help} [option...]" >&2
    echo
    echo "    install <version>"
    echo "    group -v=<version> -p=<prefix>"
    echo "    server -v=<version> -p=<prefix> -n=<name> -P=<port> -u=<user> -g=<group> --password=<password>"
    echo
    # echo some stuff here for the -a or --add-options 
    exit 1
}

# mariadb install <version>
# <version> e.g. 10.3.13
# mariadb install 10.3.13
install() {
  if [ "$#" -ne 1 ]; then
    help
    exit 1
  fi

  local MariaDB=mariadb-$1
  local MariaDBPackName=mariadb-$1.tar.gz
  # local MariaDBUrlPath=https://downloads.mariadb.com/MariaDB/${MariaDB}/source/${MariaDBPackName}
  local MariaDBUrlPath=http://192.168.113.1:8080/${MariaDBPackName}
  local MariaDBSrcPath=${ToySrcPath}/${MariaDB}
  local MariaDBTarPath=${ToyTmpPath}/${MariaDB}
  local MariaDBPackPath=${ToySrcPath}/${MariaDB}/${MariaDBPackName}
  local MariaDBInstallPath=${ToySoftPath}/${MariaDB}

  echo "${MariaDB} installation"
  echo "pleace input <Enter> twice to continue or <CTRL+C> to exit:"
  read
  read

  # backup
  if [ -d "${MariaDBInstallPath}" ]; then
    mv ${MariaDBInstallPath} ${MariaDBInstallPath}-`date '+%Y-%m-%d(%H:%M:%S)'`
  fi

  rm -rf ${MariaDBSrcPath}
  rm -rf ${MariaDBTarPath}

  mkdir -p ${MariaDBSrcPath}
  mkdir -p ${MariaDBTarPath}

  wget ${MariaDBUrlPath} -O ${MariaDBPackPath}

  local retVal=$?
  if [ "${retVal}" -ne 0 ]; then
      exit ${retVal}
  fi

  tar -zxvf ${MariaDBPackPath} -C ${MariaDBTarPath}

  mkdir -p ${MariaDBTarPath}/build
  cd ${MariaDBTarPath}/build

  # configure
  . scl_source enable devtoolset-7

  local MariaDBConfigure=(
    -DCMAKE_INSTALL_PREFIX=${MariaDBInstallPath}
    # -DINSTALL_MYSQLDATADIR=${MariaDBDataPath}
    # -DINSTALL_SYSCONFDIR=${MariaDBEtcPath}
    # -DINSTALL_SYSCONF2DIR=${MariaDBEtcPath}/my.cnf.d
    # -DINSTALL_UNIX_ADDRDIR=${MariaDBVarPath}/mysql.sock

    # -DMYSQL_DATADIR=${MariaDBDataPath}

    -DWITH_SYSTEMD=yes

    -DCONC_WITH_CURL=ON
    -DCONC_WITH_SSL=ON

    -DCONNECT_WITH_JDBC=ON
    -DCONNECT_WITH_LIBXML2=ON
    -DCONNECT_WITH_MONGO=ON
    -DCONNECT_WITH_ODBC=ON
    -DCONNECT_WITH_VCT=ON
    -DCONNECT_WITH_XMAP=ON
    -DCONNECT_WITH_ZIP=ON

    -DWITH_WSREP=ON
    -DWITH_INNODB_DISALLOW_WRITES=ON

    -DENABLED_LOCAL_INFILE=ON
  )

  for item in ${MariaDBConfigure[@]}; do
    echo ${item} >> ../option
  done

  cmake ${MariaDBConfigure[@]} ../${MariaDB}  2> ../configure.err
  cmake -LAH . > ../configure

  make -j 8 2> ../make.err
  make -j 8 install 2> ../install.err

  # done
  echo
  echo
  echo ================================================================================
  echo "${MariaDB} installation SUCCESS"
  echo "Configure:"
  for item in ${MariaDBConfigure[@]}; do
    echo "    ${item}"
  done
  echo ================================================================================
  echo
  echo

  exit 0
}

# mariadb group 
# -v, --version
# -p, --prefix
# mariadb group -v=10.3.13 -p=/var/sites/www_test_com
# mariadb group -v=10.3.13 -p=/var/sites/www_test_com
group(){
  for i in "$@"; do
  case $i in
      -v=*|--version=*)
      local Version="${i#*=}"
      shift
      ;;
      -p=*|--prefix=*)
      local Prefix="${i#*=}"
      shift
      ;;
      *)

      ;;
  esac
  done

  if [ -z "$Version" ] || [ -z "$Prefix" ]; then
    help
    exit 1
  fi

  local MariaDB=mariadb-$Version
  local MariaDBInstallPath=${ToySoftPath}/${MariaDB}

  if [ ! -d "${MariaDBInstallPath}" ]; then
    echo "${MariaDB} is not installed yet"
    exit 1
  fi

  local NodePath=${Prefix}/${MariaDB}

  local NodeData=${NodePath}/data
  local NodeEtc=${NodePath}/etc
  local NodeVar=${NodePath}/var
  local NodeLog=${NodePath}/log
  local NodeSystemd=${NodePath}/systemd

  mkdir -p ${NodeData}
  mkdir -p ${NodeEtc}
  mkdir -p ${NodeVar}
  mkdir -p ${NodeLog}
  mkdir -p ${NodeSystemd}

  echo
  return 0
}

# mariadb server 
# -v, --version
# -p, --prefix
# -n, --name
# -P, --port
# -u, --user
# -g, --group
# --password
# mariadb server -v=10.3.13 -p=/var/sites/www_test_com -n=www -P=3306 -u=mariadb-10.3.13 -g=www --password=foobared
# mariadb server -v=10.3.13 -p=/var/sites/www_test_com -n=www -P=3307 -u=mariadb-10.3.13 -g=www --password=foobared
server(){
  for i in "$@"; do
  case $i in
      -v=*|--version=*)
      local Version="${i#*=}"
      shift
      ;;
      -p=*|--prefix=*)
      local Prefix="${i#*=}"
      shift
      ;;
      -n=*|--name=*)
      local Name="${i#*=}"
      shift
      ;;
      -P=*|--port=*)
      local Port="${i#*=}"
      shift
      ;;
      -u=*|--user=*)
      local User="${i#*=}"
      shift
      ;;
      -g=*|--group=*)
      local Group="${i#*=}"
      shift
      ;;
      --password=*)
      local Password="${i#*=}"
      shift
      ;;
      *)

      ;;
  esac
  done

  if [ -z "$Version" ] || [ -z "$Prefix" ] || [ -z "$Name" ] || [ -z "$Port" ] || [ -z "$Password" ]; then
    help
    exit 1
  fi

  local MariaDB=mariadb-$Version
  local MariaDBInstallPath=${ToySoftPath}/${MariaDB}

  local User=${User:-${MariaDB}}
  local Group=${Group:-www}

  if [ ! -d "${MariaDBInstallPath}" ]; then
    echo "${MariaDB} is not installed yet"
    exit 1
  fi

  local NodePath=${Prefix}/${MariaDB}

  local NodeData=${NodePath}/data
  local NodeEtc=${NodePath}/etc
  local NodeVar=${NodePath}/var
  local NodeLog=${NodePath}/log
  local NodeSystemd=${NodePath}/systemd

  local ServerData=${NodeData}/${Name}
  local ServerEtc=${NodeEtc}/${Name}
  local ServerVar=${NodeVar}/${Name}
  local ServerLog=${NodeLog}/${Name}

  local ServerConf=${ServerEtc}/my.cnf
  local ServerConfD=${ServerEtc}/my.cnf.d
  local ServerPid=${ServerVar}/mariadb.pid
  local ServerSocket=${ServerVar}/mariadb.socket

  if [ -d "${ServerEtc}" ]; then
    echo "${ServerEtc} already exists"
    exit 1
  fi

  mkdir -p ${ServerData}
  mkdir -p ${ServerEtc}
  mkdir -p ${ServerVar}
  mkdir -p ${ServerLog}
  mkdir -p ${ServerConfD}

  local UUID=$(echo -n ${ServerEtc} | openssl md5 | awk '{print $2}')

  # my.cnf
  # https://mariadb.com/kb/en/library/configuring-mariadb-with-option-files/
  echo
  echo
  echo "my.cnf"
  /bin/cp -v ${ToyCnfPath}/${MariaDB}/my.cnf ${ServerConf}

  sed -i "/@CONF_DIR@/{
    s::${ServerConfD}:g
    w /dev/stdout
  }" ${ServerConf}

  echo
  echo
  echo "my.cnf.d/server.cnf"
  /bin/cp -v ${ToyCnfPath}/${MariaDB}/my.cnf.d/server.cnf ${ServerConfD}/server.cnf

  sed -i "/@PORT@/{
    s::${Port}:g
    w /dev/stdout
  }" ${ServerConfD}/server.cnf
  sed -i "/@SOCKET@/{
    s::${ServerSocket}:g
    w /dev/stdout
  }" ${ServerConfD}/server.cnf
  sed -i "/@DATADIR@/{
    s::${ServerData}:g
    w /dev/stdout
  }" ${ServerConfD}/server.cnf
  sed -i "/@PID@/{
    s::${ServerPid}:g
    w /dev/stdout
  }" ${ServerConfD}/server.cnf

  echo
  echo
  echo "my.cnf.d/client.cnf"
  /bin/cp ${ToyCnfPath}/${MariaDB}/my.cnf.d/client.cnf ${ServerConfD}/client.cnf

  sed -i "/@PORT@/{
    s::${Port}:g
    w /dev/stdout
  }" ${ServerConfD}/client.cnf
  sed -i "/@SOCKET@/{
    s::${ServerSocket}:g
    w /dev/stdout
  }" ${ServerConfD}/client.cnf

  echo
  echo
  echo "my.cnf.d/mysql-clients.cnf"
  /bin/cp -v ${ToyCnfPath}/${MariaDB}/my.cnf.d/mysql-clients.cnf ${ServerConfD}/mysql-clients.cnf

  # user&group
  echo
  echo
  echo "user&group"
  if getent group ${Group} &>/dev/null; then
    echo "${Group} already exists"
  else
    groupadd ${Group} && echo "groupadd ${Group}"
  fi
  if getent passwd ${User} &>/dev/null; then
    echo "${User} already exists"
  else
    useradd -s /sbin/nologin -d /dev/null -M -g ${Group} ${User} &&
      echo "useradd -s /sbin/nologin -d /dev/null -M -g ${Group} ${User}"
  fi

  # mysql_install_db
  # https://mariadb.com/kb/en/library/installing-system-tables-mysql_install_db/
  echo
  echo
  echo "mysql_install_db"
  chown -R ${User}:${Group} ${ServerData}
  chown -R ${User}:${Group} ${ServerEtc}
  chown -R ${User}:${Group} ${ServerVar}
  chown -R ${User}:${Group} ${ServerLog}

  ${MariaDBInstallPath}/scripts/mysql_install_db --basedir=${MariaDBInstallPath} --datadir=${ServerData} --user=${User}

  # mariadb@.server
  # https://mariadb.com/kb/en/library/systemd/
  echo
  echo
  echo "mariadb@.server"
  /bin/cp -v ${ToyCnfPath}/${MariaDB}/mariadb@.service ${NodeSystemd}/${MariaDB}@${UUID}.service

  sed -i "/@MariaDB@/{
    s::${MariaDB}:g
    w /dev/stdout
  }" ${NodeSystemd}/${MariaDB}@${UUID}.service
  sed -i "/@USER@/{
    s::${User}:g
    w /dev/stdout
  }" ${NodeSystemd}/${MariaDB}@${UUID}.service
  sed -i "/@GROUP@/{
    s::${Group}:g
    w /dev/stdout
  }" ${NodeSystemd}/${MariaDB}@${UUID}.service
  sed -i "/@BIN_DIR@/{
    s::${MariaDBInstallPath}/bin:g
    w /dev/stdout
  }" ${NodeSystemd}/${MariaDB}@${UUID}.service
  sed -i "/@SCRIPTS_DIR@/{
    s::${MariaDBInstallPath}/scripts:g
    w /dev/stdout
  }" ${NodeSystemd}/${MariaDB}@${UUID}.service
  sed -i "/@CONF_PATH@/{
    s::${ServerConf}:g
    w /dev/stdout
  }" ${NodeSystemd}/${MariaDB}@${UUID}.service

  systemctl enable ${NodeSystemd}/${MariaDB}@${UUID}.service

  # security
  echo
  echo
  echo "security"
  local SecuritySql=`cat <<EOF
DROP DATABASE test;
DELETE FROM mysql.user WHERE user='';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '${Password}' WITH GRANT OPTION;
UPDATE mysql.user SET password=PASSWORD('${Password}');
SELECT User,Host,Password FROM mysql.user;
FLUSH PRIVILEGES;
EOF
`

  echo "${SecuritySql}"
  systemctl start ${MariaDB}@${UUID}.service
  ${MariaDBInstallPath}/bin/mysql --defaults-file=${ServerConf} -e "${SecuritySql}"
  systemctl stop ${MariaDB}@${UUID}.service

  # firewall
  echo
  echo
  echo "firewall"
  if firewall-cmd --list-ports --zone=public | grep ${Port}/tcp &>/dev/null; then
    echo "${Port} already exists"
  else
    firewall-cmd --permanent --zone=public --add-port=${Port}/tcp &&
      echo "firewall-cmd --permanent --zone=public --add-port=${Port}/tcp"
    firewall-cmd --reload &&
      echo "firewall-cmd --reload"
  fi

  echo
  return 0
}

case "$1" in
  install)
    shift
    install "$@"
    ;;
  group)
    shift
    group "$@"
    ;;
  server)
    shift
    server "$@"
    ;;
  *)
    help
    ;;
esac